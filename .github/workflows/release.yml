name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'RELEASE_V*'

permissions:
  contents: write
  packages: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Set up Qt (macOS)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.0'
          cache: true
          cache-key-prefix: ${{ runner.os }}-Qt-6.5.0
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build (macOS)
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON
          cmake --build build -- -v
      - name: Copy icon to app bundle
        run: |
          # Copy the icon to the app bundle Resources directory
          mkdir -p build/MonitorSwitch.app/Contents/Resources
          cp icons/MonitorSwitch.icns build/MonitorSwitch.app/Contents/Resources/
          
          # Verify app bundle structure
          echo "App bundle structure:"
          find build/MonitorSwitch.app -type f | head -20
          
          # Check Info.plist
          echo "Info.plist contents:"
          cat build/MonitorSwitch.app/Contents/Info.plist || echo "Info.plist not found"
          
          # Check executable
          echo "Executable file:"
          ls -la build/MonitorSwitch.app/Contents/MacOS/
          
          # Make sure executable has correct permissions
          chmod +x build/MonitorSwitch.app/Contents/MacOS/MonitorSwitch
      - name: Sign macOS app (ad-hoc)
        run: |
          # Ad-hoc sign the app bundle with free certificate
          # This allows the app to run without requiring a paid Apple Developer certificate
          echo "Signing app with ad-hoc certificate..."
          codesign --force --deep --sign - build/MonitorSwitch.app
          
          # Verify the signature
          echo "Verifying app signature..."
          codesign --verify --verbose=2 build/MonitorSwitch.app
          
          # Display signature information
          echo "App signature details:"
          codesign --display --verbose=4 build/MonitorSwitch.app
          
          # Test that the app is properly signed
          echo "Testing app signature validity..."
          spctl --assess --type exec build/MonitorSwitch.app || echo "Note: App assessment failed (expected for ad-hoc signed apps)"
          
          # Verify app bundle is still intact after signing
          echo "App bundle after signing:"
          ls -la build/MonitorSwitch.app/Contents/MacOS/
          file build/MonitorSwitch.app/Contents/MacOS/MonitorSwitch
      - name: Create ZIP package
        run: |
          # Create a temporary directory for packaging
          mkdir -p macos_package
          cp -R build/MonitorSwitch.app macos_package/
          
          # Create installation instructions
          cat > macos_package/INSTALL.txt << 'EOF'
          MonitorSwitch Installation Instructions
          =====================================
          
          IMPORTANT: This app is ad-hoc signed (free certificate) for distribution.
          
          To install and run the app:
          1. Copy MonitorSwitch.app to your Applications folder
          2. Right-click on MonitorSwitch.app and select "Open"
          3. Click "Open" when macOS asks for confirmation
          4. The app will then run normally from future launches
          
          If you see security warnings:
          - Go to System Preferences > Security & Privacy > General
          - Click "Open Anyway" when you see the MonitorSwitch notification
          
          Note: These security warnings are expected for apps not distributed 
          through the Mac App Store.
          EOF
          
          # Create the ZIP file
          cd macos_package
          zip -r ../build/MonitorSwitch-macOS.zip .
          cd ..
          
          # Verify the ZIP was created
          ls -la build/MonitorSwitch-macOS.zip
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: MonitorSwitch-macOS
          path: build/MonitorSwitch-macOS.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Set up Qt (Windows)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.0'
          cache: true
          cache-key-prefix: ${{ runner.os }}-Qt-6.5.0
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build (Windows)
        run: |
          # Create build directory
          mkdir build
          cd build
          
          # Configure with CMake using Visual Studio generator
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release ..
          
          # Build the project
          cmake --build . --config Release
          
      - name: Deploy Qt libraries (Windows)
        run: |
          # Create deployment directory
          mkdir deploy
          
          # Copy executable to deployment directory
          copy build\Release\MonitorSwitch.exe deploy\
          
          # Use windeployqt to bundle Qt libraries
          windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\MonitorSwitch.exe
          
          # Copy icons to deployment directory
          mkdir deploy\icons
          copy icons\MonitorSwitch.ico deploy\icons\
          copy icons\MonitorSwitch.png deploy\icons\
          copy icons\MonitorSwitch_icon.svg deploy\icons\
          
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: MonitorSwitch-Windows
          path: deploy\

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Qt (Linux)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.0'
          cache: true
          cache-key-prefix: ${{ runner.os }}-Qt-6.5.0
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libx11-dev libudev-dev
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build (Linux)
        run: |
          pwd
          ls -la ./src/
          chmod +x ./build.sh
          ./build.sh
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: MonitorSwitch-Linux
          path: build/MonitorSwitch

  release:
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'release' && github.event.action == 'created')
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Use the tag name as the release name
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          # Set to true for prerelease, false for final release
          prerelease: false
          # Path to files to attach to the release
          files: |
            artifacts/MonitorSwitch.dmg
            artifacts/MonitorSwitch.exe
            artifacts/MonitorSwitch
